name: Deploy to EC2 with ACR, S3, and ELB

on:
  push:
    branches:
      - dev

jobs: 
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Debug Credentials
        run: |
          echo "Access Key ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "Secret Access Key length: $(echo -n ${{ secrets.AWS_SECRET_ACCESS_KEY }} | wc -c)"
          aws sts get-caller-identity --region us-east-1 || echo "STS call failed"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}        

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}


      - name: Ensure S3 Bucket Exists
        run: |
          BUCKET_NAME=${{ secrets.S3_BUCKET }}
          if aws s3 ls "s3://$BUCKET_NAME" 2>&1 | grep -q 'NoSuchBucket'; then
            aws s3 mb "s3://$BUCKET_NAME" --region us-east-1
            echo "Created S3 bucket $BUCKET_NAME"
          else
            echo "S3 bucket $BUCKET_NAME already exists"
          fi

      - name: Ensure EC2 Instance Exists
        run: |
          INSTANCE_NAME="resultportal-ec2"
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=$INSTANCE_NAME" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" --output text 2>/dev/null || echo "none")
          
          if [ "$INSTANCE_ID" != "none" ]; then
            echo "EC2 instance $INSTANCE_NAME already exists: $INSTANCE_ID"
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          else
            SG_ID=$(aws ec2 describe-security-groups \
              --filters "Name=group-name,Values=resultportal-sg" \
              --query "SecurityGroups[0].GroupId" --output text 2>/dev/null || echo "none")
            if [ "$SG_ID" = "none" ]; then
              SG_ID=$(aws ec2 create-security-group \
                --group-name resultportal-sg --description "Security group for my app" \
                --vpc-id ${{ secrets.VPC_ID }} \
                --query "GroupId" --output text)
              aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
              aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
              echo "SG_ID=$SG_ID" >> $GITHUB_ENV
            else
              echo "SG_ID=$SG_ID" >> $GITHUB_ENV
            fi
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-0e86e20dae9224db8 \
              --instance-type t2.micro \
              --key-name ${{ secrets.EC2_KEY_NAME }} \
              --security-group-ids $SG_ID \
              --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME}]" \
              --query "Instances[0].InstanceId" --output text)
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
            echo "Created EC2 instance: $INSTANCE_ID"
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
            EC2_HOST=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
            echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV
          fi

      - name: Install Docker on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          script: |
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo amazon-linux-extras install docker -y
              sudo service docker start
              sudo usermod -a -G docker ec2-user
            fi

      - name: Ensure ALB Exists
        run: |
          ALB_NAME="resultportal-alb"
          TG_NAME="resultportal-tg"
          ALB_ARN=$(aws elbv2 describe-load-balancers \
            --names "$ALB_NAME" \
            --query "LoadBalancers[0].LoadBalancerArn" --output text 2>/dev/null || echo "none")
          
          if [ "$ALB_ARN" != "none" ]; then
            echo "ALB $ALB_NAME already exists"
          else
            TG_ARN=$(aws elbv2 create-target-group \
              --name "$TG_NAME" --protocol HTTP --port 80 --vpc-id ${{ secrets.VPC_ID }} \
              --target-type instance \
              --health-check-protocol HTTP --health-check-path / --health-check-interval-seconds 30 \
              --query "TargetGroups[0].TargetGroupArn" --output text)
            ALB_ARN=$(aws elbv2 create-load-balancer \
              --name "$ALB_NAME" --subnets ${{ secrets.SUBNET_1 }} ${{ secrets.SUBNET_2 }} \
              --security-groups ${{ env.SG_ID }} \
              --scheme internet-facing \
              --query "LoadBalancers[0].LoadBalancerArn" --output text)
            aws elbv2 wait load-balancer-available --load-balancer-arns $ALB_ARN
            aws elbv2 register-targets \
              --target-group-arn $TG_ARN \
              --targets Id=${{ env.INSTANCE_ID }}
            aws elbv2 create-listener \
              --load-balancer-arn $ALB_ARN \
              --protocol HTTP --port 80 \
              --default-actions Type=forward,TargetGroupArn=$TG_ARN
          fi
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --load-balancer-arns $ALB_ARN \
            --query "LoadBalancers[0].DNSName" --output text)
          echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV

      - name: Log in to ACR
        run: |
          echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login ${{ secrets.AZURE_ACR_LOGIN_SERVER }} -u ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin

      - name: Build and push to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/your-app:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 60s
          script: |
            echo "${{ secrets.AZURE_ACR_PASSWORD }}" | docker login ${{ secrets.AZURE_ACR_LOGIN_SERVER }} -u ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin
            docker pull ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/your-app:latest
            docker stop your-app-container || true
            docker rm your-app-container || true
            docker run -d --name your-app-container -p 80:80 \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e S3_BUCKET=${{ secrets.S3_BUCKET }} \
              ${{ secrets.AZURE_ACR_LOGIN_SERVER }}/your-app:latest

      - name: Output ALB URL
        run: |
          echo "Application is available at: http://${{ env.ALB_DNS }}"
