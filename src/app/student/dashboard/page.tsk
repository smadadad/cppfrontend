"use client"; // Client Component for state and effects
import { useState, useEffect } from "react";
import {
  Box,
  Heading,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  FormControl,
  FormLabel,
  Input,
  Textarea,
  Button,
  VStack,
  useToast,
} from "@chakra-ui/react";
import { getStudentResults, submitComplaint } from "@/utils/api"; // Updated path

// Updated interface to match mock data (subject, score only for now)
interface Result {
  subject: string;
  score: number;
  // grade and remarks omitted since mock data doesn’t provide them yet
}

export default function StudentDashboard() {
  const [results, setResults] = useState<Result[]>([]);
  const [complaint, setComplaint] = useState({ subject: "", content: "" });
  const [loading, setLoading] = useState(true); // Added loading state
  const [submitLoading, setSubmitLoading] = useState(false); // Added for complaint submission
  const toast = useToast(); // Replaces inline alerts with Chakra UI toast

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await getStudentResults();
        setResults(response.data);
      } catch (error: any) {
        toast({
          title: "Error",
          description: error.message || "Failed to fetch results",
          status: "error",
          duration: 3000,
          isClosable: true,
        });
      } finally {
        setLoading(false); // Stop loading regardless of success/failure
      }
    };
    fetchData();
    // Dependency array empty intentionally for one-time fetch on mount
  }, [toast]); // Added toast as dependency since it’s used in the effect

  const handleSubmitComplaint = async (e: React.FormEvent) => {
    e.preventDefault();
    setSubmitLoading(true); // Start loading for submission

    if (!complaint.subject || !complaint.content) {
      toast({
        title: "Validation Error",
        description: "Please fill in all fields",
        status: "warning",
        duration: 3000,
        isClosable: true,
      });
      setSubmitLoading(false);
      return;
    }

    try {
      const response = await submitComplaint(complaint.subject, complaint.content);
      toast({
        title: "Success",
        description: response.data.message,
        status: "success",
        duration: 3000,
        isClosable: true,
      });
      setComplaint({ subject: "", content: "" }); // Reset form
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to submit complaint",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setSubmitLoading(false); // Stop loading
    }
  };

  return (
    <Box maxW="7xl" mx="auto" px={[4, 6, 8]} py={8}>
      {/* Converted Tailwind classes to Chakra props */}
      <Heading size="lg" mb={6}>
        Student Dashboard
      </Heading>

      {/* Replaced inline alerts with Chakra UI toast; loading state added */}
      {loading ? (
        <Box>Loading results...</Box>
      ) : (
        <>
          <Box mb={8}>
            <Heading size="md" mb={4}>
              Your Results
            </Heading>
            <Table variant="simple">
              <Thead>
                <Tr>
                  <Th>Subject</Th>
                  <Th>Score</Th>
                  {/* Omitted Grade and Remarks since mock data lacks them */}
                </Tr>
              </Thead>
              <Tbody>
                {results.map((result, index) => (
                  <Tr key={index}> {/* TODO: Use unique ID if available */}
                    <Td>{result.subject}</Td>
                    <Td>{result.score}</Td>
                  </Tr>
                ))}
              </Tbody>
            </Table>
          </Box>

          <Box>
            <Heading size="md" mb={4}>
              Submit a Complaint
            </Heading>
            <form onSubmit={handleSubmitComplaint}>
              <VStack spacing={4}>
                <FormControl isRequired>
                  <FormLabel>Subject</FormLabel>
                  <Input
                    value={complaint.subject}
                    onChange={(e) =>
                      setComplaint({ ...complaint, subject: e.target.value })
                    }
                  />
                </FormControl>
                <FormControl isRequired>
                  <FormLabel>Complaint</FormLabel>
                  <Textarea
                    rows={4}
                    value={complaint.content}
                    onChange={(e) =>
                      setComplaint({ ...complaint, content: e.target.value })
                    }
                  />
                </FormControl>
                <Button
                  type="submit"
                  colorScheme="blue"
                  isLoading={submitLoading} // Added loading indicator
                >
                  Submit Complaint
                </Button>
              </VStack>
            </form>
          </Box>
        </>
      )}
    </Box>
  );
}